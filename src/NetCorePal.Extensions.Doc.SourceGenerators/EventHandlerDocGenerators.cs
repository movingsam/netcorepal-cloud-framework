// using System.Linq;
// using System.Runtime.CompilerServices;
// using System.Text;
// using System.Text.Json;
// using System.Text.Json.Serialization;
// using Microsoft.CodeAnalysis;
// using Microsoft.CodeAnalysis.CSharp.Syntax;
// using Microsoft.CodeAnalysis.Text;
// using NetCorePal.Extensions.Doc.SourceGenerators.Models;
//
// namespace NetCorePal.Extensions.Doc.SourceGenerators;
//
// [Generator(LanguageNames.CSharp)]
// public class EventHandlerDocGenerators : IIncrementalGenerator
// {
//     public void Initialize(IncrementalGeneratorInitializationContext context)
//     {
// #if Debug
//         Debugger.Launch();
// #endif
//         var syntaxProvider = context.SyntaxProvider
//             .CreateSyntaxProvider(
//                 predicate: (node, _) =>
//                 {
//                     if (node is TypeDeclarationSyntax { BaseList: { Types.Count: > 0 } } typeDeclaration)
//                     {
//                         return typeDeclaration.BaseList
//                             .Types
//                             .Any(t => t.ToString()
//                                 .Contains("IDomainEventHandler"));
//                     }
//                     return node is TypeDeclarationSyntax { BaseList.Types.Count: > 0 };
//                 },
//                 transform: (syntaxContext, _) => (TypeDeclarationSyntax)syntaxContext.Node)
//             .Where(tds => tds != null)
//             .WithTrackingName("EventHandlerDocGenerator");
//
//         var compilationAndTypes = context.CompilationProvider.Combine(syntaxProvider.Collect());
//         context.RegisterSourceOutput(compilationAndTypes, (spc, source) =>
//         {
//             var (compilation, typeDeclarations) = source;
//             foreach (var tds in typeDeclarations)
//             {
//                 var semanticModel = compilation.GetSemanticModel(tds.SyntaxTree);
//                 GeneratorDomainEventHandlerGraph(spc, semanticModel, tds);
//             }
//         });
//     }
//     
//     private static void GeneratorDomainEventHandlerGraph(SourceProductionContext spc,
//         SemanticModel semanticModel, TypeDeclarationSyntax tds)
//     {
//         var symbol = semanticModel.GetDeclaredSymbol(tds);
//         if (symbol is not INamedTypeSymbol namedTypeSymbol) return;
//         JsonSerializerOptions jsonSerializerOptions = new()
//         {
//             WriteIndented = true,
//             IncludeFields = true,
//             PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
//             Converters =
//             {
//                 new JsonStringEnumConverter(JsonNamingPolicy.CamelCase)
//             }
//         };
//         var eventHandler = new DomainEventHandlerMetaData(namedTypeSymbol,semanticModel);
//         var csStr = SourceText.From(GetSourceGeneratorJsonRenderCs(
//                 eventHandler.Name + "AggregateRoot", eventHandler.Namespace,
//                 JsonSerializer.Serialize(eventHandler,jsonSerializerOptions))
//             , Encoding.UTF8);
//         spc.AddSource($"{eventHandler.Name}_EventHandler.g.cs", csStr);
//     }
//     
//     
//      
//     
//     private static string GetSourceGeneratorJsonRenderCs(string className, string nameSpace, string json)
//     {
//         return $$""""
//                  // <auto-generated/>
//                  using System;
//                  using System.Collections.Generic;
//
//                  namespace {{nameSpace}}
//                  {
//                  
//                      public class {{className}} : 
//                      global::NetCorePal.Extensions.Doc.SourceGenerators.Abstractions.ISourceGeneratorJsonRender,
//                      global::NetCorePal.Extensions.Doc.SourceGenerators.Abstractions.IHandlerDoc
//                      {
//                            public {{className}}()
//                            {
//                            }
//                            public string JsonRender()
//                            {
//                                  return 
//                  """
//                  {{json}}
//                  """;
//                            }
//                      }
//                  }
//                  """";
//     }
// }