using System.Linq;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using NetCorePal.Extensions.Doc.SourceGenerators.Models;

namespace NetCorePal.Extensions.Doc.SourceGenerators;

[Generator]
public class AggregateRootJsonGenerators : IIncrementalGenerator
{
    private static readonly JsonSerializerOptions JsonSerializerOptions = new()
    {
        WriteIndented = true,
        IncludeFields = true,
        PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
        Converters =
        {
            new JsonStringEnumConverter(JsonNamingPolicy.CamelCase)
        }
    };

    /// <summary>
    /// 
    /// </summary>
    /// <param name="context"></param>
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
#if Debug
        Debugger.Launch();
#endif
        var syntaxProvider = context
                .SyntaxProvider
                .CreateSyntaxProvider(
                    predicate: (node, _) => node is TypeDeclarationSyntax,
                    transform: (syntaxContext, _) => (TypeDeclarationSyntax)syntaxContext.Node)
                .Where(tds => tds != null)
                .WithTrackingName("AggregateRootJsonGenerator");

        var compilationAndTypes = 
            context.CompilationProvider.Combine(syntaxProvider.Collect());
        context.RegisterSourceOutput(compilationAndTypes, (spc, source) =>
        {
            var (compilation, typeDeclarations) = source;
            foreach (var tds in typeDeclarations)
            {
                var semanticModel = compilation.GetSemanticModel(tds.SyntaxTree);
                GenerateAggregateRootJson(spc, semanticModel, tds);
            }
        });
    }

    private void GenerateAggregateRootJson(SourceProductionContext spc,
        SemanticModel semanticModel, TypeDeclarationSyntax tds)
    {
        var symbol = semanticModel.GetDeclaredSymbol(tds);
        if (symbol is not INamedTypeSymbol namedTypeSymbol) return;

        var aggregateRoot = namedTypeSymbol.Interfaces
            .SingleOrDefault(t => t.Name.Equals("IAggregateRoot"));
        if (aggregateRoot == null) return;
        var aggregateRootMetaData = new AggregateRootMetaData(namedTypeSymbol);

        var csStr = SourceText.From(GetSourceGeneratorJsonRenderCs(
                aggregateRootMetaData.Name + "AggregateRoot", aggregateRootMetaData.Namespace,
                JsonSerializer.Serialize(aggregateRootMetaData,JsonSerializerOptions))
            , Encoding.UTF8);
        // 聚合根名称获取
        spc.AddSource($"{aggregateRootMetaData.Name}AggregateRoot.g.cs", csStr);
    }

    private string GetSourceGeneratorJsonRenderCs(string className, string nameSpace, string json)
    {
        return $$""""
                 // <auto-generated/>
                 using System;
                 using System.Collections.Generic;

                 namespace {{nameSpace}}
                 {
                 
                     public class {{className}} : global::NetCorePal.Extensions.Doc.Abstractions.ISourceGeneratorJsonRender,
                     global::NetCorePal.Extensions.Doc.Abstractions.IAggregateRootDoc
                     {
                           public {{className}}()
                           {
                           }
                           public string JsonRender()
                           {
                                 return 
                 """
                 {{json}}
                 """;
                           }
                     }
                 }
                 """";
    }
}