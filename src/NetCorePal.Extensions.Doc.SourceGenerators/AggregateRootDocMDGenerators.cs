// using System.Linq;
// using System.Text;
// using System.Text.Json;
// using System.Text.Json.Serialization;
// using Microsoft.CodeAnalysis;
// using Microsoft.CodeAnalysis.CSharp.Syntax;
// using Microsoft.CodeAnalysis.Text;
// using NetCorePal.Extensions.Doc.SourceGenerators.Models;
//
// namespace NetCorePal.Extensions.Doc.SourceGenerators;
//
// [Generator]
// public class AggregateRootDocGenerators : IIncrementalGenerator
// {
//     public void Initialize(IncrementalGeneratorInitializationContext context)
//     {
// #if Debug
//         Debugger.Launch();
// #endif
//         var syntaxProvider = context.SyntaxProvider
//             .CreateSyntaxProvider(
//                 predicate: (node, _) => node is TypeDeclarationSyntax,
//                 transform: (syntaxContext, _) => (TypeDeclarationSyntax)syntaxContext.Node)
//             .Where(tds => tds != null);
//
//         var compilationAndTypes = context.CompilationProvider.Combine(syntaxProvider.Collect());
//         context.RegisterSourceOutput(compilationAndTypes, (spc, source) =>
//         {
//             var (compilation, typeDeclarations) = source;
//             foreach (var tds in typeDeclarations)
//             {
//                 var semanticModel = compilation.GetSemanticModel(tds.SyntaxTree);
//                 GenerateAggregateRootJson(spc, semanticModel, tds);
//             }
//         });
//     }
//
//     private void GenerateAggregateRootJson(SourceProductionContext spc,
//         SemanticModel semanticModel, TypeDeclarationSyntax tds)
//     {
//         var symbol = semanticModel.GetDeclaredSymbol(tds);
//         if (symbol is not INamedTypeSymbol namedTypeSymbol) return;
//
//         var aggregateRoot = namedTypeSymbol.Interfaces
//             .SingleOrDefault(t => t.Name.Equals("IAggregateRoot"));
//         if (aggregateRoot == null) return;
//         var aggregateRootMetaData = new AggregateRootMetaData(namedTypeSymbol);
//         JsonSerializerOptions jsonSerializerOptions = new()
//         {
//             WriteIndented = true,
//             IncludeFields = true,
//             PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
//             Converters =
//             {
//                 new JsonStringEnumConverter(JsonNamingPolicy.CamelCase)
//             }
//         };
//         // 获取json
//         var csStr = SourceText.From(GenerateAggregateRootDoc(
//                 aggregateRootMetaData.Name + "AggregateRoot", aggregateRootMetaData.Namespace,
//                 JsonSerializer.Serialize(aggregateRootMetaData,jsonSerializerOptions))
//             , Encoding.UTF8);
//         // diagnostic
//         var diagnostic = Diagnostic.Create(new DiagnosticDescriptor("AggregateRootJsonGenerator", "AggregateRootJsonGenerator", $"转换代码：{csStr}", "AggregateRootJsonGenerator", DiagnosticSeverity.Info, true), tds.GetLocation());
//         spc.ReportDiagnostic(diagnostic);
//         // 聚合根名称获取
//         spc.AddSource($"{aggregateRootMetaData.Name}AggregateRootDoc.g.cs", csStr);
//     }
//     
//     private string GenJsonRenderCs(string className, string nameSpace, string json)
//     {
//         // json转义
//         var template = $@"// <auto-generated/>
//                        
//                        """;
//         return template;
//     }
//     private static void GenerateAggregateRootDoc(SourceProductionContext spc,
//         SemanticModel semanticModel, TypeDeclarationSyntax tds)
//     {
//         var symbol = semanticModel.GetDeclaredSymbol(tds);
//         if (symbol is not INamedTypeSymbol namedTypeSymbol) return;
//
//         var aggregateRoot = namedTypeSymbol.Interfaces
//             .SingleOrDefault(t => t.Name.Equals("IAggregateRoot"));
//         if (aggregateRoot == null) return;
//         // 聚合根名称获取
//         var aggregateRootName = namedTypeSymbol.Name;
//         // 聚合根命名空间获取
//         var aggregateRootNamespace = namedTypeSymbol.ContainingNamespace.ToDisplayString();
//         // 聚合根属性获取
//         // var aggregateRootProperties = namedTypeSymbol.GetMembers()
//         //     .Where(p => p.Kind == SymbolKind.Property)
//         //     .OfType<IPropertySymbol>()
//         //     .Where(p => p.DeclaredAccessibility == Accessibility.Public)
//         //     .Select(p => new AggregateRootPropGraphModel(p.Name, p.Type.Name.ToString())).ToArray();
//         //
//         //
//         // // 聚合根方法获取
//         // var aggregateRootMethods = namedTypeSymbol.GetMembers()
//         //     .Where(m => m.Kind == SymbolKind.Method)
//         //     .OfType<IMethodSymbol>()
//         //     .Where(m => m.DeclaredAccessibility == Accessibility.Public &&
//         //                 m.MethodKind != MethodKind.PropertyGet &&
//         //                 m.MethodKind != MethodKind.PropertySet &&
//         //                 m.MethodKind != MethodKind.Constructor)
//         //     .Select(m => new AggregateRootMethodGraphModel(m))
//         //     .ToArray();
//         //
//         // // 生成Markdown输出模型
//         // var aggregateRootDto = new AggregateRootGraphModel(aggregateRootName,
//         //     aggregateRootNamespace, aggregateRootProperties,
//         //     aggregateRootMethods);
//         // foreach (var domainEvent in aggregateRootDto
//         //              .Methods.Where(x =>
//         //                 !string.IsNullOrWhiteSpace(x.DomainEvent))
//         //              .Select(x => x.DomainEvent!))
//         // {
//         //     var refHandler = EventHandlerDocGenerators.DomainEventGraphModels.TryGetValue(
//         //         domainEvent,
//         //         out var eventHandlerGraphModel);
//         //     aggregateRootDto.AddDomainEventHandler(
//         //         eventHandlerGraphModel?.Name ?? string.Empty,
//         //         eventHandlerGraphModel?.Namespace ?? string.Empty);
//         // }
//
//      
//         spc.AddSource($"TestEntityMDOutput.g.cs",
//             SourceText.From("public class TestEntityMDOutput {}", Encoding.UTF8));
//     }
// }